CREATE DATABASE bd_producao;
USE bd_producao;

CREATE TABLE usuarios (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    nm_usuario VARCHAR(100),
    email VARCHAR(100)
);


CREATE TABLE produtos (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    nm_produto VARCHAR(100),
    vl_produto DECIMAL(10, 2),
    data_atualizacao timestamp
);

CREATE TABLE venda (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    id_usuario INT,
    id_produto INT,
    data_venda DATE,
    quantidade INT,
    preco_unitario DECIMAL(10,2),
    FOREIGN KEY (id_usuario) REFERENCES usuarios(id),
    FOREIGN KEY (id_produto) REFERENCES produtos(id)
);


CREATE TABLE dados_usuario (
    id INT PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
    id_usuario INT NOT NULL UNIQUE,
    cpf VARCHAR(11) NOT NULL,
    logradouro VARCHAR(255),
    numero VARCHAR(10),
    cidade VARCHAR(100),
    bairro VARCHAR(100),
    CONSTRAINT fk_usuario FOREIGN KEY (id_usuario) REFERENCES usuarios(id) ON DELETE CASCADE
);


--create view 

CREATE OR REPLACE VIEW vw_vendas AS
SELECT 
    v.id AS id_venda,
    u.nm_usuario,
    du.cpf,
    du.logradouro ||', '|| du.numero AS logradouro,
    du.bairro,
    du.cidade,
    p.nm_produto,
    v.data_venda,
    v.quantidade,
    v.preco_unitario,
    (v.quantidade * v.preco_unitario) AS total_venda
	FROM venda v 
JOIN usuarios u ON v.id_usuario = u.id
JOIN produtos p ON v.id_produto = p.id
JOIN dados_usuario du ON du.id_usuario = u.id;




SELECT * 
	FROM vw_vendas vw
	WHERE EXTRACT(YEAR FROM vw.data_venda) = '2025';


--create trigger

CREATE OR REPLACE FUNCTION fn_data_atualizacao()
RETURNS TRIGGER AS $$
BEGIN
    IF NEW.vl_produto IS DISTINCT FROM OLD.vl_produto THEN
        NEW.data_atualizacao := NOW();
    END IF;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


CREATE TRIGGER trg_atualizar_data
BEFORE UPDATE ON produtos
FOR EACH ROW
EXECUTE FUNCTION fn_data_atualizacao();


SELECT * FROM produtos p 